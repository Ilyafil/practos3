using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace TaskManagerApp
{
    public class TaskItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string Priority { get; set; }
        public string Status { get; set; }
        public int UserId { get; set; }
    }

    public class User
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public int Id { get; set; }
    }

    class Program
    {
        private static readonly string UsersFilePath = "users.txt";
        private static readonly string TasksFilePath = "tasks.txt";
        private static int _nextUserId = 1;
        private static int _nextTaskId = 1;

        static async Task Main(string[] args)
        {
            Console.WriteLine("Добро пожаловать в консольный менеджер задач!");
            await LoadLastIds();

            int currentUserId = -1;

            while (true)
            {
                if (currentUserId == -1)
                {
                    Console.WriteLine("\nВыберите действие:\n1. Регистрация\n2. Вход\n3. Выход");
                    switch (Console.ReadLine())
                    {
                        case "1": currentUserId = await RegisterUser(); break;
                        case "2": currentUserId = await LoginUser(); break;
                        case "3": Console.WriteLine("До свидания!"); return;
                        default: Console.WriteLine("Неверный выбор. Попробуйте снова."); break;
                    }
                }
                else
                {
                    Console.WriteLine("\nВыберите действие:\n1. Создать задачу\n2. Посмотреть задачи\n3. Редактировать задачу\n4. Удалить задачу\n5. Выйти из системы");
                    switch (Console.ReadLine())
                    {
                        case "1": await CreateTask(currentUserId); break;
                        case "2": await ViewTasks(currentUserId); break;
                        case "3": await EditTask(currentUserId); break;
                        case "4": await DeleteTask(currentUserId); break;
                        case "5": currentUserId = -1; Console.WriteLine("Вы вышли из системы."); break;
                        default: Console.WriteLine("Неверный выбор. Попробуйте снова."); break;
                    }
                }
            }
        }

        static async Task LoadLastIds()
        {
            var users = await LoadUsers();
            if (users.Count > 0) _nextUserId = users.Max(u => u.Id) + 1;

            var tasks = await LoadTasks();
            if (tasks.Count > 0) _nextTaskId = tasks.Max(t => t.UserId) + 1;
        }

        static async Task<int> RegisterUser()
        {
            Console.WriteLine("Введите имя пользователя:");
            string username = Console.ReadLine();

            var users = await LoadUsers();
            if (users.Any(u => u.Username == username))
            {
                Console.WriteLine("Пользователь с таким именем уже существует.");
                return -1;
            }

            Console.WriteLine("Введите пароль:");
            string password = Console.ReadLine();

            var newUser = new User { Username = username, Password = password, Id = _nextUserId++ };
            users.Add(newUser);
            await SaveUsers(users);

            Console.WriteLine("Регистрация прошла успешно.");
            return newUser.Id;
        }

        static async Task<int> LoginUser()
        {
            Console.WriteLine("Введите имя пользователя:");
            string username = Console.ReadLine();
            Console.WriteLine("Введите пароль:");
            string password = Console.ReadLine();

            var users = await LoadUsers();
            var user = users.FirstOrDefault(u => u.Username == username && u.Password == password);

            if (user == null)
            {
                Console.WriteLine("Неверное имя пользователя или пароль.");
                return -1;
            }

            Console.WriteLine($"Вы вошли как: {user.Username}");
            return user.Id;
        }

        static async Task CreateTask(int userId)
        {
            Console.WriteLine("Введите заголовок задачи:");
            string title = Console.ReadLine();

            Console.WriteLine("Введите описание задачи:");
            string description = Console.ReadLine();

            Console.WriteLine("Выберите приоритет (низкий, средний, высокий):");
            string priority = Console.ReadLine();

            Console.WriteLine("Выберите статус (недоступна, в процессе, завершена):");
            string status = Console.ReadLine();

            var newTask = new TaskItem { Title = title, Description = description, Priority = priority, Status = status, UserId = userId };
            var tasks = await LoadTasks();
            tasks.Add(newTask);
            await SaveTasks(tasks);

            Console.WriteLine("Задача создана успешно.");
        }

        static async Task ViewTasks(int userId)
        {
            var tasks = await LoadTasks();
            var userTasks = tasks.Where(t => t.UserId == userId).ToList();

            if (userTasks.Count == 0)
            {
                Console.WriteLine("Нет задач для отображения.");
                return;
            }

            Console.WriteLine("\nСписок задач:");
            for (int i = 0; i < userTasks.Count; i++)
            {
                Console.WriteLine($"{i + 1}. Название: {userTasks[i].Title}, Описание: {userTasks[i].Description}, Приоритет: {userTasks[i].Priority}, Статус: {userTasks[i].Status}");
            }
        }

        static async Task EditTask(int userId)
        {
            var tasks = await LoadTasks();
            var userTasks = tasks.Where(t => t.UserId == userId).ToList();

            if (userTasks.Count == 0)
            {
                Console.WriteLine("Нет задач для редактирования.");
                return;
            }

            Console.WriteLine("Введите номер задачи для редактирования:");
            if (!int.TryParse(Console.ReadLine(), out int taskIndex) || taskIndex < 1 || taskIndex > userTasks.Count)
            {
                Console.WriteLine("Неверный номер задачи.");
                return;
            }

            var taskToEdit = userTasks[taskIndex - 1];
            int globalTaskIndex = tasks.IndexOf(taskToEdit);

            Console.WriteLine($"Редактирование задачи: {taskToEdit.Title}");
            Console.WriteLine("Введите новый заголовок задачи (или нажмите Enter, чтобы пропустить):");
            string newTitle = Console.ReadLine();
            if (!string.IsNullOrEmpty(newTitle)) taskToEdit.Title = newTitle;

            Console.WriteLine("Введите новое описание задачи (или нажмите Enter, чтобы пропустить):");
            string newDescription = Console.ReadLine();
            if (!string.IsNullOrEmpty(newDescription)) taskToEdit.Description = newDescription;

            Console.WriteLine("Выберите новый приоритет (низкий, средний, высокий, или нажмите Enter, чтобы пропустить):");
            string newPriority = Console.ReadLine();
            if (!string.IsNullOrEmpty(newPriority)) taskToEdit.Priority = newPriority;

            Console.WriteLine("Выберите новый статус (недоступна, в процессе, завершена, или нажмите Enter, чтобы пропустить):");
            string newStatus = Console.ReadLine();
            if (!string.IsNullOrEmpty(newStatus)) taskToEdit.Status = newStatus;

            tasks[globalTaskIndex] = taskToEdit;
            await SaveTasks(tasks);
            Console.WriteLine("Задача отредактирована успешно.");
        }

        static async Task DeleteTask(int userId)
        {
            var tasks = await LoadTasks();
            var userTasks = tasks.Where(t => t.UserId == userId).ToList();

            if (userTasks.Count == 0)
            {
                Console.WriteLine("Нет задач для удаления.");
                return;
            }

            Console.WriteLine("Введите номер задачи для удаления:");
            if (!int.TryParse(Console.ReadLine(), out int taskIndex) || taskIndex < 1 || taskIndex > userTasks.Count)
            {
                Console.WriteLine("Неверный номер задачи.");
                return;
            }

            tasks.Remove(userTasks[taskIndex - 1]);
            await SaveTasks(tasks);
            Console.WriteLine("Задача удалена успешно.");
        }

        static async Task<List<User>> LoadUsers()
        {
            if (!File.Exists(UsersFilePath)) return new List<User>();

            var users = new List<User>();
            using (var reader = new StreamReader(UsersFilePath))
            {
                string line;
                while ((line = await reader.ReadLineAsync()) != null)
                {
                    var parts = line.Split(':');
                    if (parts.Length == 3) users.Add(new User { Username = parts[0], Password = parts[1], Id = int.Parse(parts[2]) });
                }
            }
            return users;
        }

        static async Task SaveUsers(List<User> users)
        {
            using (var writer = new StreamWriter(UsersFilePath))
            {
                foreach (var user in users) await writer.WriteLineAsync($"{user.Username}:{user.Password}:{user.Id}");
            }
        }

        static async Task<List<TaskItem>> LoadTasks()
        {
            if (!File.Exists(TasksFilePath)) return new List<TaskItem>();

            var tasks = new List<TaskItem>();
            using (var reader = new StreamReader(TasksFilePath))
            {
                string line;
                while ((line = await reader.ReadLineAsync()) != null)
                {
                    var parts = line.Split(':');
                    if (parts.Length == 5) tasks.Add(new TaskItem { Title = parts[0], Description = parts[1], Priority = parts[2], Status = parts[3], UserId = int.Parse(parts[4]) });
                }
            }
            return tasks;
        }

        static async Task SaveTasks(List<TaskItem> tasks)
        {
            using (var writer = new StreamWriter(TasksFilePath))
            {
                foreach (var task in tasks) await writer.WriteLineAsync($"{task.Title}:{task.Description}:{task.Priority}:{task.Status}:{task.UserId}");
            }
        }
    }
}
